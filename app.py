import streamlit as st
from PIL import Image
import pandas as pd
from catboost import CatBoostClassifier

st.set_page_config(
    page_title="ML Dashboard",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state='expanded'
)

if 'page' not in st.session_state:
    st.session_state.page = "–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ"

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
with st.sidebar:
    # –°—Ç–∏–ª–∏
    st.markdown("""
    <style>
    .sidebar-title {
        font-size: 28px !important;
        color: #2c3e50 !important;
        margin-bottom: 20px;
        text-align: center;
        padding-bottom: 10px;
        border-bottom: 2px solid #3498db;
    }
    .nav-item {
        display: block;
        padding: 12px 20px;
        margin: 8px 0;
        border-radius: 8px;
        background-color: #f8f9fa;
        color: #2c3e50;
        text-decoration: none;
        transition: background-color 0.2s;
    }
    .nav-item:hover {
        background-color: #e3f2fd;
    }
    .nav-item.active {
        background-color: #3498db;
        color: white !important;
    }
    .nav-icon {
        margin-right: 10px;
        font-size: 18px;
    }
    .logo-container {
        text-align: center;
        margin-top: 30px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
    }
    </style>
    """, unsafe_allow_html=True)

    st.markdown('<div class="sidebar-title">–ù–∞–≤–∏–≥–∞—Ü–∏—è</div>', unsafe_allow_html=True)

    # –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é
    pages = [
        {"name": "–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ", "icon": "üë§"},
        {"name": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ", "icon": "üìä"},
        {"name": "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", "icon": "üìà"},
        {"name": "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", "icon": "üîÆ"}
    ]

    for p in pages:
        is_active = st.session_state.page == p["name"]
        active_class = "active" if is_active else ""

        if st.button(
                f"{p['icon']} {p['name']}",
                key=f"nav_{p['name']}",
                use_container_width=True
        ):
            st.session_state.page = p["name"]

    st.markdown("""
    <div class="logo-container">
        <div style="font-size: 24px;">ü§ñ Dashboard</div>
        <div style="font-size: 12px; color: #7f8c8d;">v2.1</div>
    </div>
    """, unsafe_allow_html=True)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ
if st.session_state.page == "–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ":
    # –°—Ç–∏–ª–∏
    st.markdown("""
    <style>
    .developer-card {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        margin-bottom: 30px;
    }
    .header-section {
        text-align: center;
        padding: 20px 0;
        background: linear-gradient(to right, #4b6cb7, #182848);
        color: white;
        border-radius: 15px;
        margin-bottom: 30px;
    }
    .info-card {
        background-color: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        margin: 15px 0;
    }
    .section-title {
        color: #2c3e50;
        border-left: 5px solid #3498db;
        padding-left: 15px;
        margin: 25px 0 15px 0;
    }
    .badge {
        display: inline-block;
        background: #3498db;
        color: white;
        padding: 5px 15px;
        border-radius: 20px;
        margin: 5px 5px 5px 0;
        font-size: 14px;
    }
    .tech-stack {
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
        margin: 20px 0;
    }
    .tech-item {
        text-align: center;
        width: 80px;
        margin: 10px;
    }
    .tech-icon {
        font-size: 36px;
        margin-bottom: 10px;
        color: #4b6cb7;
    }
    .contact-btn {
        background: linear-gradient(to right, #3498db, #2c3e50);
        color: white !important;
        padding: 10px 20px;
        border-radius: 30px;
        text-align: center;
        display: block;
        margin: 20px auto;
        width: 80%;
        text-decoration: none;
        font-weight: bold;
        transition: transform 0.3s;
    }
    .contact-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 7px 14px rgba(0,0,0,0.1);
        text-decoration: none;
        color: white;
    }
    /* –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏ */
    .st-emotion-cache-keje6w {
        gap: 3rem;
    }
    </style>
    """, unsafe_allow_html=True)

    # –®–∞–ø–∫–∞
    st.markdown("""
    <div class="header-section">
        <h1>–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ–µ–∫—Ç–∞</h1>
        <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ —ç—Ç–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞</p>
    </div>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns([1, 2], gap="large")

    with col1:
        # –§–æ—Ç–∫–∞
        try:
            img = Image.open("assets/matr.jpg")
            st.image(img, width=280, use_container_width=True)
        except:
            st.warning("–§–æ—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        st.markdown("""
        <div class="developer-card">
            <h3 style="color: #2c3e50; margin-top: 20px; text-align: center;">–ú–∞—Ç—Ä–æ—Å–æ–≤–∞ –†–∞–∏—Å–∞ –ï–≤–≥–µ–Ω—å–µ–≤–Ω–∞</h3>
            <div style="background: #ffffff; padding: 10px; border-radius: 10px; margin: 15px 0; text-align: center;">
                <p style="margin: 0;">–§–ò–¢-232</p>
            </div>
        
        </div>
        """, unsafe_allow_html=True)
        st.markdown("""
            <div style="background: #ffffff; padding: 10px; border-radius: 10px; margin: 15px 0; text-align: center;">
                <h4>üë©‚Äçüíª –ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
                <p>‚úâÔ∏è matrosova-05@list.ru</p>
                <p>üì± @rmatroskin</p>
            </div>
        </div>
        """, unsafe_allow_html=True)


    with col2:
        st.markdown("""
        <h3 class="section-title">–û –ø—Ä–æ–µ–∫—Ç–µ</h3>
        <h4>üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</h4>
        <p>–ú–ê–®–ò–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï –ò –ë–û–õ–¨–®–ò–ï –î–ê–ù–ù–´–ï</p>
        <h4 style="margin-top: 20px;">üéØ –¢–µ–º–∞ –†–ì–†</h4>
        <p>"–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–∞—à–±–æ—Ä–¥–∞) –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ (–≤—ã–≤–æ–¥–∞) –º–æ–¥–µ–ª–µ–π ML –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"</p>

        """, unsafe_allow_html=True)

        st.markdown("""
        <h3 class="section-title">–°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</h3>
        <div class="info-card">
            <div class="tech-stack">
                <div class="tech-item">
                    <div class="tech-icon">üêç</div>
                    <div>Python</div>
                </div>
                <div class="tech-item">
                    <div class="tech-icon">üìä</div>
                    <div>Streamlit</div>
                </div>
                <div class="tech-item">
                    <div class="tech-icon">ü§ñ</div>
                    <div>Scikit-learn</div>
                </div>
                <div class="tech-item">
                    <div class="tech-icon">üß†</div>
                    <div>TensorFlow</div>
                </div>
                <div class="tech-item">
                    <div class="tech-icon">üê±</div>
                    <div>CatBoost</div>
                </div>
                <div class="tech-item">
                    <div class="tech-icon">üìà</div>
                    <div>Pandas</div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("""
        <h3 class="section-title">–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞</h3>
        <div class="info-card">
            <div style="display: flex; flex-wrap: wrap;">
                <span class="badge">–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏</span>
                <span class="badge">–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</span>
                <span class="badge">–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</span>
                <span class="badge">–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</span>
                <span class="badge">–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞</span>
                <span class="badge">–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏</span>
            </div>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("""
        <h3 class="section-title">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</h3>
        <div class="info-card">
            <div style="display: flex; margin-bottom: 20px;">
                <div style="flex: 1; padding-right: 15px;">
                    <h4>üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</h4>
                    <p>–û–º—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç</p>
                    <p>–§–ò–¢–∏–ö–°</p>
                    <p>–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç, 2 –∫—É—Ä—Å</p>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ
elif st.session_state.page == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ":
    st.title("üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö Smoke Detection")
    st.markdown("---")

    # –°—Ç–∏–ª–∏
    st.markdown("""
    <style>
    .feature-card {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }
    .section-title {
        color: #2c3e50;
        border-bottom: 2px solid #3498db;
        padding-bottom: 10px;
        margin-top: 30px;
    }
    .metric-box {
        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
        color: white;
        border-radius: 10px;
        padding: 15px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    .feature-table {
        width: 100%;
        border-collapse: collapse;
    }
    .feature-table th {
        background-color: #3498db;
        color: white;
        padding: 12px;
        text-align: left;
    }
    .feature-table td {
        padding: 10px;
        border-bottom: 1px solid #ddd;
    }
    .feature-table tr:nth-child(even) {
        background-color: #f2f2f2;
    }
    .tab-content {
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 0 0 10px 10px;
        border-top: none;
    }
    </style>
    """, unsafe_allow_html=True)

    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("""
        <div class="metric-box">
            <h4>–†–∞–∑–º–µ—Ä –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
            <h3>62,630 –∑–∞–ø–∏—Å–µ–π</h3>
        </div>
        """, unsafe_allow_html=True)
    with col2:
        st.markdown("""
        <div class="metric-box">
            <h4>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</h4>
            <h3>12 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫</h3>
        </div>
        """, unsafe_allow_html=True)
    with col3:
        st.markdown("""
        <div class="metric-box">
            <h4>–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è</h4>
            <h3>Fire Alarm (0/1)</h3>
        </div>
        """, unsafe_allow_html=True)

    st.markdown("---")

    # –í–≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3 = st.tabs(["üìã –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", "üîç –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö", "‚öôÔ∏è –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞"])

    with tab1:
        col_context, col_photo = st.columns([2, 1])

        with col_context:
            st.markdown('<h3 class="section-title">–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –æ–±–ª–∞—Å—Ç—å</h3>', unsafe_allow_html=True)
            st.markdown("""
            <div class="feature-card">
                <p><strong>–î–µ—Ç–µ–∫—Ç–æ—Ä –¥—ã–º–∞</strong> ‚Äî —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ–∂–∞—Ä–∞ 
                –ø–æ –Ω–∞–ª–∏—á–∏—é –¥—ã–º–∞ –≤ –≤–æ–∑–¥—É—Ö–µ. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:</p>
            </div>
            """, unsafe_allow_html=True)

            col1, col2 = st.columns(2)
            with col1:
                st.markdown("""
                <div class="feature-card">
                    <h4>üì∏ –§–æ—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π</h4>
                    <ul>
                        <li>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–µ—Ç–æ–≤–æ–π –ª—É—á</li>
                        <li>–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≤–∏–¥–∏–º—ã–µ —á–∞—Å—Ç–∏—Ü—ã</li>
                        <li>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è —Ç–ª–µ—é—â–∏—Ö –ø–æ–∂–∞—Ä–æ–≤</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)

            with col2:
                st.markdown("""
                <div class="feature-card">
                    <h4>‚ö° –ò–æ–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π</h4>
                    <ul>
                        <li>–†–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª</li>
                        <li>–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –Ω–µ–≤–∏–¥–∏–º—ã–µ —á–∞—Å—Ç–∏—Ü—ã</li>
                        <li>–ë—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø–ª–∞–º—è</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)

            st.markdown('<h3 class="section-title">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</h3>', unsafe_allow_html=True)
            st.markdown("""
            <div class="feature-card">
                <table class="feature-table">
                    <thead>
                        <tr>
                            <th>–ü—Ä–∏–∑–Ω–∞–∫</th>
                            <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                            <th>–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr><td>UTC</td><td>–í—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è</td><td>ISO 8601</td></tr>
                        <tr><td>Temperature</td><td>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã</td><td>¬∞C</td></tr>
                        <tr><td>Humidity</td><td>–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å</td><td>%</td></tr>
                        <tr><td>TVOC</td><td>–õ–µ—Ç—É—á–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</td><td>ppb</td></tr>
                        <tr><td>eCO2</td><td>–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç CO2</td><td>ppm</td></tr>
                        <tr><td>Raw H2</td><td>–°—ã—Ä—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤–æ–¥–æ—Ä–æ–¥–∞</td><td>—É—Å–ª.–µ–¥.</td></tr>
                        <tr><td>Raw Ethanol</td><td>–°—ã—Ä—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —ç—Ç–∞–Ω–æ–ª–∞</td><td>—É—Å–ª.–µ–¥.</td></tr>
                        <tr><td>Pressure</td><td>–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ</td><td>–≥–ü–∞</td></tr>
                        <tr><td>PM1.0</td><td>–ß–∞—Å—Ç–∏—Ü—ã &lt;1.0 –º–∫–º</td><td>–º–∫–≥/–º¬≥</td></tr>
                        <tr><td>PM2.5</td><td>–ß–∞—Å—Ç–∏—Ü—ã &lt;2.5 –º–∫–º</td><td>–º–∫–≥/–º¬≥</td></tr>
                        <tr><td>NC0.5</td><td>–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü &lt;0.5 –º–∫–º</td><td>#/—Å–º¬≥</td></tr>
                        <tr><td>CNT</td><td>–°—á–µ—Ç—á–∏–∫ –ø–æ–∂–∞—Ä–∞</td><td>—á–∏—Å–ª–æ–≤–æ–π</td></tr>
                        <tr><td>Fire Alarm</td><td>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∂–∞—Ä–∞</td><td>0/1 –±–∏–Ω–∞—Ä–Ω—ã–π</td></tr>
                    </tbody>
                </table>
            </div>
            """, unsafe_allow_html=True)

        with col_photo:
            try:
                img = Image.open("assets/detector.jpeg")
                st.image(img, caption="–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥—ã–º–∞", use_container_width=True)
            except:
                st.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            st.markdown("""
            <div style="background-color: #e3f2fd; padding: 15px; border-radius: 10px; margin-top: 20px;">
                <h4>üî¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</h4>
                <p>–î–∞—Ç—á–∏–∫–∏ –≤ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞—Ö –∏–∑–º–µ—Ä—è—é—Ç:</p>
                <ul>
                    <li>–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é —á–∞—Å—Ç–∏—Ü —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤</li>
                    <li>–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –≥–∞–∑–æ–≤ (CO2, TVOC)</li>
                    <li>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å</li>
                    <li>–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

    with tab2:
        st.markdown('<h3 class="section-title">–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>', unsafe_allow_html=True)
        st.markdown("""
        <div class="feature-card">
            <p><strong>10 —Å—Ç—Ä–æ–∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:</strong></p>
        </div>
        """, unsafe_allow_html=True)

        try:
            df = pd.read_csv(r'C:\Users\Zver\Desktop\ML\data\smoke_detector_task.csv', encoding='utf-8', sep=',')
            st.dataframe(
                df.sample(10),
                use_container_width=True,
                height=300
            )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

        st.markdown('<h3 class="section-title" style="margin-top: 30px;">–û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>', unsafe_allow_html=True)
        st.markdown("""
        <div class="feature-card">
            <p><strong>–ü–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏:</strong></p>
        </div>
        """, unsafe_allow_html=True)

        try:
            df_clean = pd.read_csv(r'C:\Users\Zver\Desktop\ML\data\smoke_detector_task_filtered.csv', encoding='utf-8',
                                   sep=',')
            st.dataframe(
                df_clean.sample(10),
                use_container_width=True,
                height=300
            )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    with tab3:
        st.markdown('<h3 class="section-title">–≠—Ç–∞–ø—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö</h3>', unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("""
            <div class="feature-card">
                <h4>üîé –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h4>
                <ul>
                    <li>–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: float64(11), int64(3), object(1)</li>
                    <li>62630 —Å—Ç—Ä–æ–∫, 15 —Å—Ç–æ–ª–±—Ü–æ–≤</li>
                    <li>–í—ã–±—Ä–æ—Å—ã –≤ TVOC, eCO2, PM1.0, PM2.5</li>
                    <li>–ü—Ä–æ–ø—É—Å–∫–∏ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å—Ç–æ–ª–±—Ü–æ–≤</li>
                </ul>
            </div>

            <div class="feature-card">
                <h4>üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
                <ul>
                    <li>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –º–µ–¥–∏–∞–Ω–æ–π –¥–ª—è:
                        <ul>
                            <li>Temperature[C]</li>
                            <li>TVOC[ppb]</li>
                            <li>eCO2[ppm]</li>
                            <li>Raw H2</li>
                        </ul>
                    </li>
                    <li>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ —Å—Ä–µ–¥–Ω–∏–º –¥–ª—è:
                        <ul>
                            <li>Humidity[%]</li>
                            <li>Pressure[hPa]</li>
                        </ul>
                    </li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown("""
            <div class="feature-card">
                <h4>üîß –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h4>
                <ul>
                    <li>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö:
                        <ul>
                            <li>'TVOC[ppb]' ‚Üí int</li>
                            <li>'eCO2[ppm]' ‚Üí int</li>
                            <li>'Raw H2' ‚Üí int</li>
                        </ul>
                    </li>
                    <li>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:
                        <ul>
                            <li>–î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</li>
                        </ul>
                    </li>
                </ul>
            </div>

            <div class="feature-card">
                <h4>‚öñÔ∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
                    <ul>
                        <li>–ö–ª–∞—Å—Å 0 (–Ω–µ—Ç –ø–æ–∂–∞—Ä–∞): 58,000 –∑–∞–ø–∏—Å–µ–π</li>
                        <li>–ö–ª–∞—Å—Å 1 (–ø–æ–∂–∞—Ä): 4,630 –∑–∞–ø–∏—Å–µ–π</li>
                        <li>–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞ SMOTE –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–ª–∞—Å—Å–æ–≤</li>
                        <li>–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: 1:1</li>
                    </ul>
            </div>
            """, unsafe_allow_html=True)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
elif st.session_state.page == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏":
    st.title("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

    # –°—Ç–∏–ª–∏
    st.markdown("""
    <style>
    .viz-card {
        background-color: #ffffff;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 25px;
        box-shadow: 0 6px 16px rgba(0,0,0,0.08);
        transition: transform 0.3s ease;
    }
    .section-header {
        font-size: 24px;
        color: #2c3e50;
        border-bottom: 3px solid #3498db;
        padding-bottom: 10px;
        margin: 30px 0 20px 0;
        font-weight: 600;
    }
    .caption-box {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 12px;
        margin-top: 10px;
        text-align: center;
        font-size: 14px;
        color: #5f6c7b;
    }
    </style>
    """, unsafe_allow_html=True)

    # –°–µ–∫—Ü–∏—è 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    st.markdown('<div class="section-header">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</div>', unsafe_allow_html=True)

    cols = st.columns(3)
    with cols[0]:

        st.image("assets/1.1.png", use_container_width=True)
        st.markdown('<div class="caption-box">–†–∏—Å—É–Ω–æ–∫ 1.1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)


        st.image("assets/1.2.png", use_container_width=True)
        st.markdown('<div class="caption-box">–†–∏—Å—É–Ω–æ–∫ 1.2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)

    with cols[1]:

        st.image("assets/1.3.png", use_container_width=True)
        st.markdown('<div class="caption-box">–†–∏—Å—É–Ω–æ–∫ 1.3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Raw H2</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)


        st.image("assets/1.4.png", use_container_width=True)
        st.markdown('<div class="caption-box">–†–∏—Å—É–Ω–æ–∫ 1.4: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Raw Ethanol</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)

    with cols[2]:

        st.image("assets/1.5.png", use_container_width=True)
        st.markdown('<div class="caption-box">–†–∏—Å—É–Ω–æ–∫ 1.5: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–∞–∑–æ–≤</div>',
                    unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)


        st.image("assets/1.6.png", use_container_width=True)
        st.markdown('<div class="caption-box">–†–∏—Å—É–Ω–æ–∫ 1.6: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)

    # –°–µ–∫—Ü–∏—è 2: –î–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Å–µ—è–Ω–∏—è
    st.markdown('<div class="section-header">–î–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Å–µ—è–Ω–∏—è</div>', unsafe_allow_html=True)

    cols = st.columns(2)
    with cols[0]:

        st.image("assets/2.1.png", use_container_width=True)
        st.markdown('<div class="caption-box">–†–∏—Å—É–Ω–æ–∫ 2.1: TVOC vs eCO2</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)

    with cols[1]:

        st.image("assets/2.2.png", use_container_width=True)
        st.markdown('<div class="caption-box">–†–∏—Å—É–Ω–æ–∫ 2.2: –í–ª–∞–∂–Ω–æ—Å—Ç—å vs H2</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)

    # –°–µ–∫—Ü–∏—è 3: –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    st.markdown('<div class="section-header">–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π</div>', unsafe_allow_html=True)

    cols = st.columns(2)
    with cols[0]:

        st.image("assets/3.1.png", use_container_width=True)
        st.markdown('<div class="caption-box">–†–∏—Å—É–Ω–æ–∫ 3.1: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)

    with cols[1]:

        st.image("assets/4.1.png", use_container_width=True)
        st.markdown('<div class="caption-box">–†–∏—Å—É–Ω–æ–∫ 4.1: –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)

    # –°–µ–∫—Ü–∏—è 4: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    st.markdown('<div class="section-header">–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑</div>', unsafe_allow_html=True)

    cols = st.columns(2)
    with cols[0]:

        st.image("assets/5.1.png", use_container_width=True)
        st.markdown('<div class="caption-box">–†–∏—Å—É–Ω–æ–∫ 5.1: –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π (–ü–æ–∂–∞—Ä)</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)

    with cols[1]:

        st.image("assets/5.2.png", use_container_width=True)
        st.markdown('<div class="caption-box">–†–∏—Å—É–Ω–æ–∫ 5.2: –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π (–ù–µ—Ç –ø–æ–∂–∞—Ä–∞)</div>',
                    unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
elif st.session_state.page == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è":
    st.title("üî• –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø–æ–∂–∞—Ä–Ω–æ–π —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏")

    # –°—Ç–∏–ª–∏
    st.markdown("""
    <style>
    .prediction-card {
        background-color: #ffffff;
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 25px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.08);
    }
    .input-section {
        background: linear-gradient(135deg, #f5f7fa 0%, #e3e8f7 100%);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 25px;
    }
    .result-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9ff 100%);
        border-radius: 12px;
        padding: 25px;
        text-align: center;
        box-shadow: 0 6px 16px rgba(0,0,0,0.08);
        margin-top: 20px;
    }
    .fire-alert {
        font-size: 32px;
        font-weight: bold;
        padding: 20px;
        border-radius: 12px;
        margin: 20px 0;
        text-align: center;
    }
    .probability-card {
        background-color: #f8f9fa;
        border-radius: 12px;
        padding: 20px;
        margin-top: 20px;
    }
    .model-selector {
        background-color: #f8f9fa;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
    }
    .tech-details {
        background-color: #f8f9fa;
        border-radius: 12px;
        padding: 20px;
        margin-top: 20px;
    }
    .sensor-input {
        margin-bottom: 15px;
    }
    .file-uploader {
        background-color: #f8f9fa;
        border-radius: 12px;
        padding: 20px;
        margin-top: 20px;
    }
    .prediction-table {
        margin-top: 20px;
    }
    .prediction-row-fire {
        background-color: #ffebee !important;
    }
    .prediction-row-no-fire {
        background-color: #e8f5e9 !important;
    }
    </style>
    """, unsafe_allow_html=True)

    import pickle
    import tensorflow as tf
    import matplotlib.pyplot as plt
    import numpy as np
    from joblib import load

    @st.cache_resource
    def load_models():
        models = {
            "KNN": load("C:/Users/Zver/Desktop/machine_learning/notebook/models/knn_model.pkl"),
            "Gradient Boosting": load('C:/Users/Zver/Desktop/machine_learning/notebook/models/gb_model.pkl'),
            "CatBoost": CatBoostClassifier().load_model("C:/Users/Zver/Desktop/machine_learning/notebook/models/catboost_model.cbm"),
            "Bagging": load('C:/Users/Zver/Desktop/machine_learning/notebook/models/bagging_model.pkl'),
            "Stacking": load('C:/Users/Zver/Desktop/machine_learning/notebook/models/stacking_model.pkl'),
            "Optuna Neural Network": tf.keras.models.load_model(r"C:\Users\Zver\Desktop\machine_learning\notebook\models\optuna_classification_model.h5"
            )
        }
        return models

    @st.cache_resource
    def load_nn_preprocessors():
        scaler = load(r"C:\Users\Zver\Desktop\machine_learning\notebook\models\nn_scaler.pkl")
        pca = load(r"C:\Users\Zver\Desktop\machine_learning\notebook\models\nn_pca.pkl")
        return scaler, pca


    try:
        models = load_models()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        st.stop()


    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    def validate_input(df):
        validation_rules = {
            'TVOC[ppb]': {'min': 0, 'max': 60000, 'allow_zero': True},
            'eCO2[ppm]': {'min': 200, 'max': 60000, 'allow_zero': False},
            'Temperature[C]': {'min': -50, 'max': 1000, 'allow_zero': True},
            'PM2.5': {'min': 0, 'max': 1000, 'allow_zero': False},
            'NC2.5': {'min': 0, 'max': 1000, 'allow_zero': False},
            'Humidity[%]': {'min': 0, 'max': 100, 'allow_zero': True},
            'PM1.0': {'min': 0, 'max': 1000, 'allow_zero': False},
            'NC0.5': {'min': 0, 'max': 1000, 'allow_zero': False},
            'NC1.0': {'min': 0, 'max': 1000, 'allow_zero': False},
        }

        errors = []
        for idx, row in df.iterrows():
            for feature, rules in validation_rules.items():
                value = row[feature]
                min_val = rules['min']
                max_val = rules['max']
                allow_zero = rules['allow_zero']

                if not (min_val <= value <= max_val):
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx + 1}: {feature} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É {min_val} –∏ {max_val}")
                if not allow_zero and value <= 0:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx + 1}: {feature} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return errors


    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    st.header("–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
    model_choice = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:",
        list(models.keys()),
        index=2
    )
    st.markdown('</div>', unsafe_allow_html=True)

    # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    input_method = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:",
        ["–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é", "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª"],
        horizontal=True,
        index=0
    )

    required_columns = [
        'TVOC[ppb]', 'eCO2[ppm]', 'Temperature[C]', 'PM2.5', 'NC2.5',
        'Humidity[%]', 'Raw H2', 'Raw Ethanol', 'Pressure[hPa]',
        'PM1.0', 'NC0.5', 'NC1.0'
    ]

    input_df = pd.DataFrame()

    if input_method == "–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é":
        st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞—Ç—á–∏–∫–æ–≤")

        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown('<div class="sensor-input">', unsafe_allow_html=True)
            temperature = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", min_value=-50.0, max_value=100.0, value=20.0)
            humidity = st.number_input("–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)", min_value=0.0, max_value=100.0, value=50.0)
            tvoc = st.number_input("TVOC (ppb)", min_value=0, max_value=60000, value=500)
            eco2 = st.number_input("eCO2 (ppm)", min_value=400, max_value=60000, value=1000)
            st.markdown('</div>', unsafe_allow_html=True)

        with col2:
            st.markdown('<div class="sensor-input">', unsafe_allow_html=True)
            raw_h2 = st.number_input("Raw H2", min_value=1, max_value=60000, value=10000)
            raw_ethanol = st.number_input("Raw Ethanol", min_value=1, max_value=60000, value=20000)
            pressure = st.number_input("–î–∞–≤–ª–µ–Ω–∏–µ (–≥–ü–∞)", min_value=800.0, max_value=1200.0, value=1013.25)
            pm25 = st.number_input("PM2.5 (–º–∫–≥/–º¬≥)", min_value=0.1, max_value=1000.0, value=10.0)
            st.markdown('</div>', unsafe_allow_html=True)

        with col3:
            st.markdown('<div class="sensor-input">', unsafe_allow_html=True)
            pm10 = st.number_input("PM1.0 (–º–∫–≥/–º¬≥)", min_value=0.1, max_value=1000.0, value=5.0)
            nc25 = st.number_input("NC2.5 (#/—Å–º¬≥)", min_value=0.1, max_value=1000.0, value=20.0)
            nc05 = st.number_input("NC0.5 (#/—Å–º¬≥)", min_value=0.1, max_value=1000.0, value=50.0)
            nc10 = st.number_input("NC1.0 (#/—Å–º¬≥)", min_value=0.1, max_value=1000.0, value=30.0)
            st.markdown('</div>', unsafe_allow_html=True)

        input_data = {
            'TVOC[ppb]': [tvoc],
            'eCO2[ppm]': [eco2],
            'Temperature[C]': [temperature],
            'PM2.5': [pm25],
            'NC2.5': [nc25],
            'Humidity[%]': [humidity],
            'Raw H2': [raw_h2],
            'Raw Ethanol': [raw_ethanol],
            'Pressure[hPa]': [pressure],
            'PM1.0': [pm10],
            'NC0.5': [nc05],
            'NC1.0': [nc10]
        }
        input_df = pd.DataFrame(input_data)

    else:
        st.markdown('<div class="file-uploader">', unsafe_allow_html=True)
        st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=["csv"])

        if uploaded_file is not None:
            try:
                input_df = pd.read_csv(uploaded_file)
                st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                st.write(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(input_df)}")

                missing_cols = [col for col in required_columns if col not in input_df.columns]
                if missing_cols:
                    st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}")
                    st.stop()

                st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
                st.dataframe(input_df.head(3))

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)

    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", use_container_width=True, type="primary") and not input_df.empty:
        try:
            errors = validate_input(input_df)
            if errors:
                st.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö:")
                for error in errors:
                    st.error(error)
                st.stop()

            model = models[model_choice]
            input_data_for_pred = input_df[required_columns]


            if model_choice == "Optuna Neural Network":
                scaler, pca = load_nn_preprocessors()


                scaled_data = scaler.transform(input_data_for_pred)
                pca_data = pca.transform(scaled_data)


                input_array = pca_data.astype('float32')
                prediction_proba = model.predict(input_array)
                prediction = (prediction_proba > 0.5).astype(int).flatten()
            else:
                prediction = model.predict(input_data_for_pred)
                if hasattr(model, "predict_proba"):
                    prediction_proba = model.predict_proba(input_data_for_pred)
                else:

                    prediction_proba = np.zeros((len(prediction), 2))
                    for i, pred in enumerate(prediction):
                        prediction_proba[i, pred] = 1.0


            if input_method == "–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é":
                st.markdown('<div class="result-card">', unsafe_allow_html=True)
                st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è ({model_choice})")

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result = "–ü–û–ñ–ê–†!" if prediction[0] == 1 else "–ù–µ—Ç –ø–æ–∂–∞—Ä–∞"
                color = "#ff4b4b" if prediction[0] == 1 else "#2ecc71"
                st.markdown(
                    f'<div class="fire-alert" style="background-color: {color}30; border: 2px solid {color};">{result}</div>',
                    unsafe_allow_html=True)

                st.markdown('<div class="probability-card">', unsafe_allow_html=True)
                st.subheader("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")

                if model_choice == "Optuna Neural Network":
                    fire_prob = prediction_proba[0][0] if prediction[0] == 1 else prediction_proba[0][0]
                    no_fire_prob = 1 - fire_prob
                else:
                    fire_prob = prediction_proba[0][1]
                    no_fire_prob = prediction_proba[0][0]

                fig, ax = plt.subplots(figsize=(10, 3))
                bars = ax.barh(['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∂–∞—Ä–∞', '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–∂–∞—Ä–∞'],
                               [fire_prob, no_fire_prob],
                               color=['#e74c3c', '#2ecc71'])

                ax.set_xlim(0, 1)
                ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π', fontsize=14)
                ax.bar_label(bars, fmt='%.2f%%', padding=3, fontsize=12)
                ax.spines['top'].set_visible(False)
                ax.spines['right'].set_visible(False)
                ax.spines['bottom'].set_visible(False)
                ax.spines['left'].set_visible(False)
                ax.tick_params(axis='y', which='major', labelsize=12)

                st.pyplot(fig)
                st.markdown('</div>', unsafe_allow_html=True)

                with st.expander("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏", expanded=False):
                    st.write(f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:**\n{', '.join(required_columns)}")

                    if model_choice == "Optuna Neural Network":
                        st.subheader("–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏")
                        from io import StringIO
                        import sys

                        buffer = StringIO()
                        sys.stdout = buffer
                        model.summary()
                        sys.stdout = sys.__stdout__
                        model_summary = buffer.getvalue()

                        st.text(model_summary)

                st.markdown('</div>', unsafe_allow_html=True)

            else:
                st.markdown('<div class="result-card">', unsafe_allow_html=True)
                st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π ({model_choice})")


                input_df['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ'] = prediction
                input_df['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ'] = input_df['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ'].map({1: '–ü–æ–∂–∞—Ä', 0: '–ù–µ—Ç –ø–æ–∂–∞—Ä–∞'})

                if model_choice == "Optuna Neural Network":
                    input_df['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∂–∞—Ä–∞'] = prediction_proba[:, 0] if prediction_proba.shape[
                                                                                   1] == 1 else prediction_proba[:, 1]
                else:
                    input_df['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∂–∞—Ä–∞'] = prediction_proba[:, 1]

                input_df['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–∂–∞—Ä–∞'] = 1 - input_df['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∂–∞—Ä–∞']

                st.write(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(input_df)}")
                st.write(f"–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {sum(prediction)}")

                def row_style(row):
                    styles = []
                    if row['–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ'] == '–ü–æ–∂–∞—Ä':
                        styles.append('background-color: #ffebee')
                    else:
                        styles.append('background-color: #e8f5e9')
                    return styles


                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
                st.dataframe(
                    input_df.style.apply(row_style, axis=1),
                    use_container_width=True,
                    height=400
                )

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")
            st.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    elif input_df.empty:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")
# streamlit run app.py

